# Классная точка 4.0
# А теперь модернизируем уже новый класс PatchedPoint. Реализуйте магические методы _str__ и _repr__.
#
# При преобразовании в строку точка представляется в формате (x, y).
# Репрезентация же должна возвращать строку для инициализации точки двумя параметрами.
#
# Примечание
# Ваше решение должно содержать только классы и функции.
# В решении не должно быть вызовов инициализации требуемых классов.
# Классная точка 3.0
# Давайте расширим функционал класса, написанного вами в задаче «Классная точка 2.0».
#
# Создайте класс PatchedPoint — наследника уже написанного вами Point.
#
# Требуется реализовать следующие виды инициализации нового класса:
#
# параметров не передано — координаты точки равны 0;
# передан один параметр — кортеж с координатами точки;
# передано два параметра — координаты точки.
# Примечание
# Ваше решение должно содержать только классы и функции.
# В решении не должно быть вызовов инициализации требуемых классов.

class Point:

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def move(self, x, y):
        self.x += x
        self.y += y

    def length(self, point):
        return round(((self.x - point.x) ** 2 + (self.y - point.y) ** 2) ** 0.5, 2)


class PatchedPoint(Point):

    def __init__(self, *args):
        if not args:
            super().__init__(0, 0)
        elif len(args) == 2:
            x, y = args
            super().__init__(x, y)
        else:
            x, y = args[0]
            super().__init__(x, y)

    def __str__(self):
        return f'({self.x}, {self.y})'

    def __repr__(self):
        return f'PatchedPoint({self.x}, {self.y})'
