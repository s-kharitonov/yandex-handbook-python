# Дроби v0.1
# Возможно, вы уже заметили, что дробные числа (float) недостаточно точные для некоторых задач.
# Для более точных математических расчётов иногда прибегают к созданию правильных рациональных дробей,
# описываемых числителем и знаменателем.
#
# Начнём разработку класса Fraction, который реализует предлагаемые дроби.
#
# Предусмотрите возможность инициализации дроби с помощью двух целых чисел или строки
# в формате <числитель>/<знаменатель>.
# В случаях наличия общего делителя у числителя и знаменателя, дробь следует сократить.
#
# А также реализуйте методы:
#
# numerator() — возвращает значение числителя;
# numerator(number) — изменяет значение числителя и производит сокращение дроби, если это необходимо;
# denominator() – возвращает значение знаменателя;
# denominator(number) — изменяет значение знаменателя и производит сокращение дроби, если необходимо;
# __str__ — возвращает строковое представление дроби в формате <числитель>/<знаменатель>;
# __repr__ — возвращает описание объекта в формате Fraction(<числитель>, <знаменатель>).
# Примечание
# Будем считать, что пользователь знает о запрете деления на ноль.
# Все числа в данной задаче будут положительными.
# Все поля и методы, не требуемые в задаче,
# следует инкапсулировать (называть с использованием ведущих символов нижнего подчёркивания).
#
# Ваше решение должно содержать только классы и функции.
# В решении не должно быть вызовов инициализации требуемых классов.

class Fraction:

    def __init__(self, *args):
        if len(args) == 1:
            self.n, self.d = map(int, args[0].split('/'))
        else:
            self.n, self.d = args
        self.__simplify()

    def __simplify(self):
        numerator, denominator = self.n, self.d
        while denominator:
            numerator, denominator = denominator, numerator % denominator
        self.n, self.d = self.n // numerator, self.d // numerator

    def numerator(self, number=0):
        if number:
            self.n = number
            self.__simplify()
        return self.n

    def denominator(self, number=0):
        if number:
            self.d = number
            self.__simplify()
        return self.d

    def __str__(self):
        return f'{self.n}/{self.d}'

    def __repr__(self):
        return f'Fraction({self.n}, {self.d})'
