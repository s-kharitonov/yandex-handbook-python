# Кофейня
# Руководство местной кофейни для программистов под названием Java-0x00 решило модернизировать систему заказа кофе.
#
# Для этого им требуется реализовать функцию order,
# которая принимает список предпочтений посетителя в порядке «убывания желания».
#
# Согласно положению, каждый напиток в кофейне строго определён рецептом:
#
# Эспрессо готовится из: 1 порции кофейных зерен.
# Капучино готовится из: 1 порции кофейных зерен и 3 порций молока.
# Макиато готовится из: 2 порций кофейных зерен и 1 порции молока.
# Кофе по-венски готовится из: 1 порции кофейных зерен и 2 порций взбитых сливок.
# Латте Макиато готовится из: 1 порции кофейных зерен, 2 порций молока и 1 порции взбитых сливок.
# Кон Панна готовится из: 1 порции кофейных зерен и 1 порции взбитых сливок.
# В глобальной переменной in_stock содержится словарь, описывающий ингредиенты в наличии.
# Ключи словаря: coffee, cream, milk.
#
# Функция должна вернуть:
#
# название напитка, который будет приготовлен;
# сообщение «К сожалению, не можем предложить Вам напиток», если ни одно из предпочтений не может быть приготовлено.
# Если заказ, может быть совершён, количество доступных ингредиентов должно соответствующим образом уменьшиться.
#
# Примечание
# В решении не должно быть вызовов требуемых функций.
RECIPIES = {
    'Эспрессо': {
        'coffee': 1,
    },
    'Капучино': {
        'coffee': 1,
        'milk': 3,
    },
    'Макиато': {
        'coffee': 2,
        'milk': 1,
    },
    'Кофе по-венски': {
        'coffee': 1,
        'cream': 2,
    },
    'Латте Макиато': {
        'coffee': 1,
        'milk': 2,
        'cream': 1,
    },
    'Кон Панна': {
        'coffee': 1,
        'cream': 1,
    },
}


def order(*items):
    cooking_drink = None

    for item in items:
        if can_cook(item):
            cooking_drink = item
            break

    if cooking_drink:
        return cooking_drink
    return 'К сожалению, не можем предложить Вам напиток'


def can_cook(drink):
    recipe = RECIPIES[drink]
    recipe_coffee = recipe.get('coffee', 0)
    recipe_milk = recipe.get('milk', 0)
    recipe_cream = recipe.get('cream', 0)
    stock_coffee = in_stock['coffee']
    stock_milk = in_stock['milk']
    stock_cream = in_stock['cream']

    if stock_coffee >= recipe_coffee and stock_milk >= recipe_milk and stock_cream >= recipe_cream:
        in_stock['coffee'] -= recipe_coffee
        in_stock['milk'] -= recipe_milk
        in_stock['cream'] -= recipe_cream
        return True

    return False
